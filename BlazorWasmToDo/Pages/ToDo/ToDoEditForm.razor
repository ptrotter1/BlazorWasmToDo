@page "/todo-editform"
@using BlazorWasmToDo.Pages.ToDo.Models
@implements IDisposable

<h1>To Do</h1>
    
@* Don't forget to set your EditContext *@
<EditForm EditContext="FormEditContext" OnSubmit="SubmitHandler" FormName="NewToDoForm">
    <ValidationSummary/>
    <DataAnnotationsValidator/> @* not sure why this is also required when not using data annotations... *@

    <div class="form-group mb-3">
        <label>ToDo Text</label>
        <InputText class="form-control" @bind-Value="FormModel.Text"/>
    </div>

    <div class="form-group">
        <label>Due Date</label>
        @* why is TValue required here? *@
        <InputDate class="form-control" TValue="DateTimeOffset?" @bind-Value="FormModel.DueDate"/>
    </div>

    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

@code {
    private ToDoFormModel FormModel { get; set; } = default!;
    private EditContext FormEditContext { get; set; } = default!;
    private ValidationMessageStore MessageStore { get; set; } = default!;

    protected override void OnInitialized()
    {
        FormModel = new ToDoFormModel();
        FormEditContext = new EditContext(FormModel);
        //FormEditContext.OnValidationRequested += ValidationRequestedHandler;
        MessageStore = new ValidationMessageStore(FormEditContext);
    }

    private void ValidationRequestedHandler(object? sender, ValidationRequestedEventArgs e)
    {
        MessageStore.Clear();

        if (string.IsNullOrWhiteSpace(FormModel.Text))
        {
            MessageStore.Add(() => FormModel.Text, "The ToDo text cannot be blank.");
        }
        
        if (FormModel.DueDate == null)
        {
            MessageStore.Add(() => FormModel.DueDate!, "The Due Date cannot be blank.");
        }
        else if (FormModel.DueDate < DateTimeOffset.Now)
        {
            MessageStore.Add(() => FormModel.DueDate, "The Due Date must be in the future.");
        }
        else if (FormModel.DueDate.Value.DayOfWeek == DayOfWeek.Tuesday)
        {
            MessageStore.Add(() => FormModel.DueDate, "Due Date cannot be on a Tuesday.");
        }
        
        StateHasChanged();
    }

    // If a handler for OnSubmit is supplied, we cannot also provide a handler for OnInvalidSubmit or OnValidSubmit
    private void SubmitHandler()
    {
        Console.WriteLine("SubmitHandler called");

        if (FormEditContext.Validate())
        {
            Console.WriteLine("Form is valid");
        }
        else
        {
            Console.WriteLine("Form is invalid");
        }
    }
    
    private void InvalidSubmitHandler()
    {
        Console.WriteLine("InvalidSubmitHandler called");
    }
    
    private void ValidSubmitHandler()
    {
        Console.WriteLine("ValidSubmitHandler called");
    }
    
    public void Dispose()
    {
        FormEditContext.OnValidationRequested -= ValidationRequestedHandler;
    }
}